import razorpay
from django.conf import settings
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponseBadRequest
 
 
# authorize razorpay client with API Keys.
razorpay_client = razorpay.Client(
    auth=(settings.RAZOR_KEY_ID, settings.RAZOR_KEY_SECRET))
 
def homepage(request):
    currency = 'INR'

    # Retrieve the latest booking made by the user
    booking = Booking.objects.filter(user=request.user, package_name__isnull=False).latest('id')
    selected_package_tariff = booking.package_name.tariff
    cost = int(selected_package_tariff) * 100
    razorpay_order = razorpay_client.order.create(dict(
        amount=cost,  
        currency=currency,
        payment_capture='0'
    ))

    razorpay_order_id = razorpay_order['id']
    callback_url = '/paymenthandler/'+str(cost)+'/'

    context = {
        'razorpay_order_id': razorpay_order_id,
        'razorpay_merchant_key': settings.RAZOR_KEY_ID,
        'razorpay_amount': selected_package_tariff,
        'currency': currency,
        'callback_url': callback_url,
    }

    return render(request, 'homepage.html', context=context)

@csrf_exempt
def paymenthandler(request, cost):
    cost = int(cost)

    if request.method == "POST":
        payment_id = request.POST.get('razorpay_payment_id', '')
        razorpay_order_id = request.POST.get('razorpay_order_id', '')
        signature = request.POST.get('razorpay_signature', '')
        params_dict = {
            'razorpay_order_id': razorpay_order_id,
            'razorpay_payment_id': payment_id,
            'razorpay_signature': signature
        }

        result = razorpay_client.utility.verify_payment_signature(params_dict)

        if result is not None:
            try:
                # Capture the payment
                razorpay_client.payment.capture(payment_id, cost)

                # Payment capture was successful, render a success page
                return render(request, 'package.html')
            except Exception as e:
                # Handle payment capture failure, log the error, and provide an error message
                error_message = f"Payment capture failed: {str(e)}"
                logger.error(error_message)
                return render(request, 'paymentfail.html', {'error_message': error_message})
        else:
            # Signature verification failed
            return render(request, 'paymentfail.html', {'error_message': 'Signature verification failed'})

    else:
        # Only accept POST requests
        return HttpResponseBadRequest()
    

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.decorators import login_required
from .models import Reservation, SaveBooking
from datetime import datetime
from decimal import Decimal
from twilio.rest import Client

razorpay_client = razorpay.Client(
 	auth=(settings.RAZOR_KEY_ID, settings.RAZOR_KEY_SECRET))
@login_required
def roomavail(request, stay_id):
    stay = get_object_or_404(Stay, pk=stay_id)
    context = {'stay': stay}

    if request.method == 'POST':
        room_type = request.POST.get('roomType')
        check_in_date = request.POST.get('check-in')
        check_out_date = request.POST.get('check-out')
        adults = request.POST.get('adults')
        children = request.POST.get('children')
        total_price = request.POST.get('totalprice')

        existing_reservation = Reservation.objects.filter(user=request.user).first()
        if existing_reservation:
            pass
        else:
            # Create a new reservation
            reservation = Reservation(
                stay=stay,
                user=request.user,
                room_type=room_type,
                check_in_date=check_in_date,
                check_out_date=check_out_date,
                adults=adults,
                children=children,
                total_price=Decimal(total_price)
            )
            reservation.save()

            # Process payment and booking
            process_payment_and_booking(request, stay, check_in_date, check_out_date, total_price)

            # Redirect to the payment page
            return redirect('payment1')

    return render(request, 'roomavail.html', context)


from django.shortcuts import redirect

def process_payment(request, booking_id, total_price):
    # Perform payment processing logic here, similar to your farm_booking view
    # For example:
    amount = int(total_price * 100)  # Convert to the smallest currency unit (e.g., cents)
    razorpay_order = razorpay_client.order.create(dict(amount=amount, currency='INR', payment_capture='0'))
    
    # Get the newly created order ID
    razorpay_order_id = razorpay_order['id']
    
    # Construct the callback URL
    callback_url = 'http://127.0.0.1:8000/process_payment/' + str(booking_id) + '/' + str(amount) + '/'
    
    # Prepare context data
    context = {
        'razorpay_order_id': razorpay_order_id,
        'razorpay_merchant_key': settings.RAZOR_KEY_ID,
        'razorpay_amount': amount,
        'currency': 'INR',
        'callback_url': callback_url,
        'booking_id': booking_id,
        'new_amt': amount / 100  # Convert back to the actual amount
    }

    # Redirect to the payment page
    return redirect('payment', context=context)
def send_confirmation_message(user, stay, check_in_date, check_out_date):
    try:
        message_body = f"üè® Your reservation for {stay.name} from {check_in_date} to {check_out_date} is confirmed. Thank you for choosing us! üéâ"
        client = Client("AC1d7fbc157075023503fb9d17b4c9fb30", "1344237a74da4f027e4a4d95c4b44082")
        message = client.messages.create(
            from_='+19035056715',
            body=message_body,
            to='+916238911194'  
        )
    except Exception as e:
        pass